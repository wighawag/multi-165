{
  "address": "0x9f83e74173A34d59D0DFa951AE22336b835AB196",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC165[]",
          "name": "contracts",
          "type": "address[]"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC165[]",
          "name": "contracts",
          "type": "address[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "supportsMultipleInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x206e24083d1087701b909098e7fc3c2af0f1ffb8ac7129176a27f7f61d8ccd5b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xcE1AEF3e0A5324F7AB6e21B4dacc10B82666E1e2",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "652271",
    "logsBloom": "0x
    "blockHash": "0x59f61c3a4860e0ab7cf863af4f9b3ea285c4fb0753b21d91ce2e31f57ca859fe",
    "transactionHash": "0x206e24083d1087701b909098e7fc3c2af0f1ffb8ac7129176a27f7f61d8ccd5b",
    "logs": [],
    "blockNumber": 7121663,
    "cumulativeGasUsed": "715271",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c4945668401a3a637253ba949c66db8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC165[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC165[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"supportsMultipleInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Multi165.sol\":\"Multi165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Multi165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC165 {function supportsInterface(bytes4 interfaceId) external view returns (bool);}\\n\\ncontract Multi165 {\\n\\n    function supportsInterface(IERC165[] calldata contracts, bytes4 interfaceId) public view returns (bool[] memory result) {\\n        result = new bool[](contracts.length);\\n        bytes memory callData = new bytes(36);\\n        assembly {            \\n            mstore(add(callData, 32), 0x01ffc9a700000000000000000000000000000000000000000000000000000000)\\n            mstore(add(callData, 36), interfaceId)\\n        }\\n        for(uint256 i = 0; i < contracts.length; i++) {\\n            (bool success, bytes memory returndata) = address(contracts[i]).staticcall{gas: 30000}(callData);\\n            // ensure there was enough gas ( >= 30,000) given to the `supportsInterface` call\\n            // Note that `{gas: 30000}` do not ensure that, it only protect the caller to not spend more than 30,000.\\n            assert(gasleft() > 476); // 30,000 / 63\\n            if (success && returndata.length > 0 && returndata.length < 33) {\\n                bytes32 data;\\n                assembly {\\n                        data := mload(add(returndata, 32))\\n                }\\n                result[i] = uint256(data) != 0;\\n            }\\n        }\\n    }\\n\\n    function supportsMultipleInterfaces(IERC165[] calldata contracts, bytes4[] calldata interfaceIds) public view returns (bool[] memory result) {\\n        result = new bool[](contracts.length);\\n        uint256 numI = contracts.length;\\n        for(uint256 i = 0; i < numI; i++) {\\n            // asume true and set to false once one interfaceId is found to be not supported.\\n            result[i] = true;\\n            uint256 numJ = interfaceIds.length;\\n            for (uint256 j = 0; j < numJ; j ++) {\\n                bytes4 interfaceId = interfaceIds[j];\\n                bytes memory callData = new bytes(36);\\n                assembly {            \\n                    mstore(add(callData, 32), 0x01ffc9a700000000000000000000000000000000000000000000000000000000)\\n                    mstore(add(callData, 36), interfaceId)\\n                }\\n                (bool success, bytes memory returndata) = address(contracts[i]).staticcall{gas: 30000}(callData);\\n                // ensure there was enough gas ( >= 30,000) given to the `supportsInterface` call\\n                // Note that `{gas: 30000}` do not ensure that, it only protect the caller to not spend more than 30,000.\\n                assert(gasleft() > 476); // 30,000 / 63\\n                \\n                if (!success || returndata.length == 0 || returndata.length > 32) {\\n                    result[i] = false;\\n                    break;\\n                }\\n                bytes32 data;\\n                assembly {\\n                        data := mload(add(returndata, 32))\\n                }\\n                if(uint256(data) == 0) {\\n                    result[i] = false;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x0989fac9bda08206b22a38d1e3fb668dc9fbb0f71671cc365b234d6c83d98d82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610adc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806377ac7de51461003b578063f5414aaa1461006b575b600080fd5b61005560048036038101906100509190610618565b61009b565b6040516100629190610763565b60405180910390f35b610085600480360381019061008091906107dd565b610357565b6040516100929190610763565b60405180910390f35b60608484905067ffffffffffffffff8111156100ba576100b961083d565b5b6040519080825280602002602001820160405280156100e85781602001602082028036833780820191505090505b509050600085859050905060005b8181101561034d5760018382815181106101135761011261086c565b5b602002602001019015159081151581525050600085859050905060005b8181101561033857600087878381811061014d5761014c61086c565b5b9050602002016020810190610162919061089b565b90506000602467ffffffffffffffff8111156101815761018061083d565b5b6040519080825280601f01601f1916602001820160405280156101b35781602001600182028036833780820191505090505b5090507f01ffc9a70000000000000000000000000000000000000000000000000000000060208201528160248201526000808c8c888181106101f8576101f761086c565b5b905060200201602081019061020d9190610938565b73ffffffffffffffffffffffffffffffffffffffff166175308460405161023491906109df565b6000604051808303818686fa925050503d8060008114610270576040519150601f19603f3d011682016040523d82523d6000602084013e610275565b606091505b50915091506101dc5a1161028c5761028b6109f6565b5b81158061029a575060008151145b806102a6575060208151115b156102db5760008988815181106102c0576102bf61086c565b5b60200260200101901515908115158152505050505050610338565b60006020820151905060008160001c036103205760008a89815181106103045761030361086c565b5b6020026020010190151590811515815250505050505050610338565b5050505050808061033090610a5e565b915050610130565b5050808061034590610a5e565b9150506100f6565b5050949350505050565b60608383905067ffffffffffffffff8111156103765761037561083d565b5b6040519080825280602002602001820160405280156103a45781602001602082028036833780820191505090505b5090506000602467ffffffffffffffff8111156103c4576103c361083d565b5b6040519080825280601f01601f1916602001820160405280156103f65781602001600182028036833780820191505090505b5090507f01ffc9a700000000000000000000000000000000000000000000000000000000602082015282602482015260005b8585905081101561054a576000808787848181106104495761044861086c565b5b905060200201602081019061045e9190610938565b73ffffffffffffffffffffffffffffffffffffffff166175308560405161048591906109df565b6000604051808303818686fa925050503d80600081146104c1576040519150601f19603f3d011682016040523d82523d6000602084013e6104c6565b606091505b50915091506101dc5a116104dd576104dc6109f6565b5b8180156104eb575060008151115b80156104f8575060218151105b156105355760006020820151905060008160001c14158685815181106105215761052061086c565b5b602002602001019015159081151581525050505b5050808061054290610a5e565b915050610428565b50509392505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126105825761058161055d565b5b8235905067ffffffffffffffff81111561059f5761059e610562565b5b6020830191508360208202830111156105bb576105ba610567565b5b9250929050565b60008083601f8401126105d8576105d761055d565b5b8235905067ffffffffffffffff8111156105f5576105f4610562565b5b60208301915083602082028301111561061157610610610567565b5b9250929050565b6000806000806040858703121561063257610631610553565b5b600085013567ffffffffffffffff8111156106505761064f610558565b5b61065c8782880161056c565b9450945050602085013567ffffffffffffffff81111561067f5761067e610558565b5b61068b878288016105c2565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b6106da816106c5565b82525050565b60006106ec83836106d1565b60208301905092915050565b6000602082019050919050565b600061071082610699565b61071a81856106a4565b9350610725836106b5565b8060005b8381101561075657815161073d88826106e0565b9750610748836106f8565b925050600181019050610729565b5085935050505092915050565b6000602082019050818103600083015261077d8184610705565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6107ba81610785565b81146107c557600080fd5b50565b6000813590506107d7816107b1565b92915050565b6000806000604084860312156107f6576107f5610553565b5b600084013567ffffffffffffffff81111561081457610813610558565b5b6108208682870161056c565b93509350506020610833868287016107c8565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156108b1576108b0610553565b5b60006108bf848285016107c8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108f3826108c8565b9050919050565b6000610905826108e8565b9050919050565b610915816108fa565b811461092057600080fd5b50565b6000813590506109328161090c565b92915050565b60006020828403121561094e5761094d610553565b5b600061095c84828501610923565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561099957808201518184015260208101905061097e565b838111156109a8576000848401525b50505050565b60006109b982610965565b6109c38185610970565b93506109d381856020860161097b565b80840191505092915050565b60006109eb82846109ae565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610a6982610a54565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a9b57610a9a610a25565b5b60018201905091905056fea2646970667358221220d3196321cfe538458743011094dc1045afc7e3e27e04a735e2ddf4009f902f9264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806377ac7de51461003b578063f5414aaa1461006b575b600080fd5b61005560048036038101906100509190610618565b61009b565b6040516100629190610763565b60405180910390f35b610085600480360381019061008091906107dd565b610357565b6040516100929190610763565b60405180910390f35b60608484905067ffffffffffffffff8111156100ba576100b961083d565b5b6040519080825280602002602001820160405280156100e85781602001602082028036833780820191505090505b509050600085859050905060005b8181101561034d5760018382815181106101135761011261086c565b5b602002602001019015159081151581525050600085859050905060005b8181101561033857600087878381811061014d5761014c61086c565b5b9050602002016020810190610162919061089b565b90506000602467ffffffffffffffff8111156101815761018061083d565b5b6040519080825280601f01601f1916602001820160405280156101b35781602001600182028036833780820191505090505b5090507f01ffc9a70000000000000000000000000000000000000000000000000000000060208201528160248201526000808c8c888181106101f8576101f761086c565b5b905060200201602081019061020d9190610938565b73ffffffffffffffffffffffffffffffffffffffff166175308460405161023491906109df565b6000604051808303818686fa925050503d8060008114610270576040519150601f19603f3d011682016040523d82523d6000602084013e610275565b606091505b50915091506101dc5a1161028c5761028b6109f6565b5b81158061029a575060008151145b806102a6575060208151115b156102db5760008988815181106102c0576102bf61086c565b5b60200260200101901515908115158152505050505050610338565b60006020820151905060008160001c036103205760008a89815181106103045761030361086c565b5b6020026020010190151590811515815250505050505050610338565b5050505050808061033090610a5e565b915050610130565b5050808061034590610a5e565b9150506100f6565b5050949350505050565b60608383905067ffffffffffffffff8111156103765761037561083d565b5b6040519080825280602002602001820160405280156103a45781602001602082028036833780820191505090505b5090506000602467ffffffffffffffff8111156103c4576103c361083d565b5b6040519080825280601f01601f1916602001820160405280156103f65781602001600182028036833780820191505090505b5090507f01ffc9a700000000000000000000000000000000000000000000000000000000602082015282602482015260005b8585905081101561054a576000808787848181106104495761044861086c565b5b905060200201602081019061045e9190610938565b73ffffffffffffffffffffffffffffffffffffffff166175308560405161048591906109df565b6000604051808303818686fa925050503d80600081146104c1576040519150601f19603f3d011682016040523d82523d6000602084013e6104c6565b606091505b50915091506101dc5a116104dd576104dc6109f6565b5b8180156104eb575060008151115b80156104f8575060218151105b156105355760006020820151905060008160001c14158685815181106105215761052061086c565b5b602002602001019015159081151581525050505b5050808061054290610a5e565b915050610428565b50509392505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126105825761058161055d565b5b8235905067ffffffffffffffff81111561059f5761059e610562565b5b6020830191508360208202830111156105bb576105ba610567565b5b9250929050565b60008083601f8401126105d8576105d761055d565b5b8235905067ffffffffffffffff8111156105f5576105f4610562565b5b60208301915083602082028301111561061157610610610567565b5b9250929050565b6000806000806040858703121561063257610631610553565b5b600085013567ffffffffffffffff8111156106505761064f610558565b5b61065c8782880161056c565b9450945050602085013567ffffffffffffffff81111561067f5761067e610558565b5b61068b878288016105c2565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b6106da816106c5565b82525050565b60006106ec83836106d1565b60208301905092915050565b6000602082019050919050565b600061071082610699565b61071a81856106a4565b9350610725836106b5565b8060005b8381101561075657815161073d88826106e0565b9750610748836106f8565b925050600181019050610729565b5085935050505092915050565b6000602082019050818103600083015261077d8184610705565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6107ba81610785565b81146107c557600080fd5b50565b6000813590506107d7816107b1565b92915050565b6000806000604084860312156107f6576107f5610553565b5b600084013567ffffffffffffffff81111561081457610813610558565b5b6108208682870161056c565b93509350506020610833868287016107c8565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156108b1576108b0610553565b5b60006108bf848285016107c8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108f3826108c8565b9050919050565b6000610905826108e8565b9050919050565b610915816108fa565b811461092057600080fd5b50565b6000813590506109328161090c565b92915050565b60006020828403121561094e5761094d610553565b5b600061095c84828501610923565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561099957808201518184015260208101905061097e565b838111156109a8576000848401525b50505050565b60006109b982610965565b6109c38185610970565b93506109d381856020860161097b565b80840191505092915050565b60006109eb82846109ae565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610a6982610a54565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a9b57610a9a610a25565b5b60018201905091905056fea2646970667358221220d3196321cfe538458743011094dc1045afc7e3e27e04a735e2ddf4009f902f9264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}